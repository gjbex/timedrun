#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long;

my $exit_timeout = 64;
if (exists $ENV{TIMEDRUN_EXIT_TIMEOUT}) {
    $exit_timeout = $ENV{TIMEDRUN_EXIT_TIMEOUT};
}
my $exit_error = 65;
if (exists $ENV{TIMEDRUN_EXIT_ERROR}) {
    $exit_error = $ENV{TIMEDRUN_EXIT_ERROR};
}

my $timeout = undef;
my $verbose = undef;

GetOptions(
    "-t=s" => \$timeout,
    "-v"   => \$verbose,
    "-h"   => \&show_help
    );

unless (defined $timeout) {
    print STDERR "### error: no time out given\n";
    print_help();
    exit $exit_error;
}

$timeout = compute_time($timeout);
print STDERR "### running for at most $timeout seconds...\n" if $verbose;

if (scalar(@ARGV) == 0) {
    print STDERR "### error: no command specified for timedrun\n";
    print_help();
    exit $exit_error;
}

my $cmd = shift(@ARGV);
$cmd .= " " . join(" ", map {"'$_'"} @ARGV);

my $rc;
my $pid = fork;
eval {
    $SIG{ALRM} = sub { die "timeout\n" };
    die "could not fork" unless defined $pid;
    if ($pid) {
        alarm $timeout;
        waitpid $pid, 0;
        $rc = $? >> 8;
    } else {
        print STDERR "### executing $cmd...\n" if $verbose;
        exec $cmd;
    }
};
if ($@) {
    print STDERR "### killing $pid due to time out...\n" if $verbose;
    kill "SIGTERM", $pid;
    exit $exit_timeout;
} else {
    exit $rc;
}

sub compute_time {
    my ($time_str) = @_;
    if ($time_str =~ /^\d+$/) {
        return $time_str;
    } elsif ($time_str =~ /^(\d+):(\d+)$/) {
        return $1*60 + $2;
    } elsif ($time_str =~ /^(\d+):(\d+):(\d+)$/) {
        return $1*3600 + $2*60 + $3;
    } elsif ($time_str =~ /^(\d+):(\d+):(\d+):(\d+)$/) {
        return $1*24*3600 + $2*3600 + $3*60 + $4;
    } else {
        print STDERR "### error: time must be specified as [[dd:]hh:]mm:ss\n";
        exit $exit_error;
    }
}

sub show_help {
    print_help();
    exit 0;
}

sub print_help {
    print << "EOI";
### usage: timedrun -t <runtime> [-h] [-v] <cmd>
# Executes <cmd>, terminates after at most <runtime> seconds.
#
# -t <runtime> : time that the command <cmd> should run, as soon
#                as this time has passed, the command is
#                terminated; run time can be specified in
#                seconds, or as [[dd:]hh:]mm:ss
# -v           : give verbose feedback
# -h           : print this help message and exit
# <cmd>        : actual command to run, followed by whatever
#                parameters needed
#
# Exit status: * 64 if the command had to be terminated due to a
#                   time out
#              * 65 for any timedrun related error
#              * exit status of <cmd> otherwise
# Note: if the exit codes 64 and 65 conflict with those of the
#       command to run, they can be customized by setting the
#       environment variables 'TIMEDRUN_EXIT_TIMEOUT' and
#       'TIMEDRUN_EXIT_ERROR' respectively to any value between
#       1 and 255 (0 is not prohibited, but this is probably.
#       not what you want).
EOI
}

